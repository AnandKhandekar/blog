{
  
    
        "post0": {
            "title": "Univariate Normal Distribution ( 1D Gaussian )",
            "content": "This post will introduce univariate normal distribution. It intends to explain how to represent, visualize and sample from this distribution. . This post assumes basic knowledge of probability theory, probability distriutions and linear algebra. . The normal distribution , also known as the Gaussian distribution, is so called because its based on the Gaussian function . This distribution is defined by two parameters: the mean $ mu$, which is the expected value of the distribution, and the standard deviation $ sigma$, which corresponds to the expected deviation from the mean. The square of the standard deviation is typically referred to as the variance $ sigma^{2}$. We denote this distribution as: $$ mathcal{N}( mu, sigma^2)$$ . Given this mean and the variance we can calculate the probability density fucntion (pdf) of the normal distribution with the normalised Gaussian function. For a random variable $x$ the density is given by : $$p(x mid mu, sigma) = frac{1}{ sqrt{2 pi sigma^2}} exp{ left( - frac{(x - mu)^2}{2 sigma^2} right)}$$ . Thi distribution is called Univariate because it consists of only one random variable. . basic dependencies imported . # Imports %matplotlib inline import sys import numpy as np import matplotlib import matplotlib.pyplot as plt from matplotlib import cm # Colormaps import matplotlib.gridspec as gridspec from mpl_toolkits.axes_grid1 import make_axes_locatable import seaborn as sns sns.set_style(&#39;darkgrid&#39;) np.random.seed(42) . . customized univariate function . Instead of importing this fucntionfrom nummpy or scipy, we have created out own function which simply translates the equation and returns the single value. . def univariate_normal(x, mean, variance): &quot;&quot;&quot;pdf of the univariate normal distribution.&quot;&quot;&quot; return ((1. / np.sqrt(2 * np.pi * variance)) * np.exp(-(x - mean)**2 / (2 * variance))) . . Plot different Univariate Normals . x = np.linspace(-3, 5, num=150) fig = plt.figure(figsize=(10, 6)) plt.plot( x, univariate_normal(x, mean=0, variance=1), label=&quot;$ mathcal{N}(0, 1)$&quot;) plt.plot( x, univariate_normal(x, mean=2, variance=3), label=&quot;$ mathcal{N}(2, 3)$&quot;) plt.plot( x, univariate_normal(x, mean=0, variance=0.2), label=&quot;$ mathcal{N}(0, 0.2)$&quot;) plt.xlabel(&#39;$x$&#39;, fontsize=13) plt.ylabel(&#39;density: $p(x)$&#39;, fontsize=13) plt.title(&#39;Univariate normal distributions&#39;) plt.ylim([0, 1]) plt.xlim([-3, 5]) plt.legend(loc=1) fig.subplots_adjust(bottom=0.15) plt.show() . . Normal distribution PDF with different standard deviations . Let’s plot the probability distribution functions of a normal distribution where the mean has different standard deviations. . from scipy.stats import norm import numpy as np import matplotlib.pyplot as plt . . fig, ax = plt.subplots(figsize=(10, 6)) #fig = plt.figure(figsize=(10, 6)) x = np.linspace(-10,10,100) stdvs = [1.0, 2.0, 3.0, 4.0] for s in stdvs: ax.plot(x, norm.pdf(x,scale=s), label=&#39;stdv=%.1f&#39; % s) ax.set_xlabel(&#39;x&#39;) ax.set_ylabel(&#39;pdf(x)&#39;) ax.set_title(&#39;Normal Distribution&#39;) ax.legend(loc=&#39;best&#39;, frameon=True) ax.set_ylim(0,0.45) . . (0.0, 0.45) . Normal distribution PDF with different means . Let’s plot probability distribution functions of normal distribution where the standard deviation is 1 and different means. . fig, ax = plt.subplots(figsize=(10, 6)) x = np.linspace(-10,10,100) means = [0.0, 1.0, 2.0, 5.0] for mean in means: ax.plot(x, norm.pdf(x,loc=mean), label=&#39;mean=%.1f&#39; % mean) ax.set_xlabel(&#39;x&#39;) ax.set_ylabel(&#39;pdf(x)&#39;) ax.set_title(&#39;Normal Distribution&#39;) ax.legend(loc=&#39;best&#39;, frameon=True) ax.set_ylim(0,0.45) . . (0.0, 0.45) . A cumulative normal distribution function . The cumulative distribution function of a random variable X, evaluated at x, is the probability that X will take a value less than or equal to x. Since the normal distribution is a continuous distribution, the shaded area of the curve represents the probability that X is less or equal than x. . $$P(X leq x)=F(x)= int limits _{- infty} ^{x}f(t)dt text{, where }x in mathbb{R}$$ . fig, ax = plt.subplots(figsize=(10,6)) # for distribution curve x= np.arange(-4,4,0.001) ax.plot(x, norm.pdf(x)) ax.set_title(&quot;Cumulative normal distribution&quot;) ax.set_xlabel(&#39;x&#39;) ax.set_ylabel(&#39;pdf(x)&#39;) ax.grid(True) # for fill_between px=np.arange(-4,1,0.01) ax.set_ylim(0,0.5) ax.fill_between(px,norm.pdf(px),alpha=0.5, color=&#39;g&#39;) # for text ax.text(-1,0.1,&quot;cdf(x)&quot;, fontsize=20) plt.show() . .",
            "url": "https://anandkhandekar.github.io/blog/jupyter/univariate/normal/2021/05/02/UnivariateGaussian.html",
            "relUrl": "/jupyter/univariate/normal/2021/05/02/UnivariateGaussian.html",
            "date": " • May 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://anandkhandekar.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://anandkhandekar.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Anand Khandekar&lt;Founder,Director of the_Running_Professor Anand is a passionate academic for 20+ years, diving into Engg. Math, Mechanics, Fluid Mechanics,Theory of Machines and Vibrations. A Masters degree in CAD/CAM further pushed him into the iOT domain. Since last 3 years, Anand is building TRP, an A.I. company with the sole intention of providing solutions to all. .",
          "url": "https://anandkhandekar.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://anandkhandekar.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}